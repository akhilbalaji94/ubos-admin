#!/usr/bin/perl
#
# Central administration script for UBOS administration
#
# This file is part of ubos-admin.
# (C) 2012-2014 Indie Computing Corp.
#
# ubos-admin is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# ubos-admin is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with ubos-admin.  If not, see <http://www.gnu.org/licenses/>.
#

use strict;
use warnings;

use Fcntl ':flock';
use UBOS::Host;
use UBOS::Logging;
use UBOS::Utils;

my $commands = UBOS::Utils::findPerlShortModuleNamesInPackage( 'UBOS::Commands' );

unless( @ARGV ) {
    synopsisHelpQuit();
}
my $command = $ARGV[0];
if( '--help' eq $command || '-h' eq $command ) {
    synopsisHelpQuit( 1 );
}

my $commandPackage = $commands->{$command};
if( $commandPackage ) {
    my $skipCheckReady = 0;
    my @remainingArgs  = ();
    foreach my $arg ( @ARGV ) {
        if( '--help' eq $arg || '-h' eq $arg ) {
            if( $commandPackage ) {
                synopsisHelpQuit( 1, $command );
            } else {
                synopsisHelpQuit( 1 );
            }
        } elsif( '--skip-check-ready' eq $arg ) {
            $skipCheckReady = 1;
        } else {
            push @remainingArgs, $arg;
        }
    }

    unless( $skipCheckReady ) {
        unless( defined( UBOS::Host::checkReady())) {
            exit -1;
        }
    }
    checkOnlyOne();

    my $result = UBOS::Utils::invokeMethod( $commandPackage . '::run', @remainingArgs );

    exit !$result;
} else {
    synopsisHelpQuit( 0, undef, 1 );
}

#####
# Check that only one copy of the script is running at any time.
sub checkOnlyOne {
    # See __DATA__ at end of file
    unless( flock( DATA, LOCK_EX|LOCK_NB )) {
        print STDERR <<END;
Another copy of ubos-admin is running already. Please try again later.
END
        exit -2;
    }
}

#####
# Print synopsis or help
# $long: if true, print long help
# $helpFor: if given, only provide help on this command
# $exit: exit code
sub synopsisHelpQuit {
    my $long    = shift;
    my $helpFor = shift;
    my $exit    = shift || 0;

    unless( $helpFor ) {
        if( $long ) {
            print <<END;
The central UBOS administration command. For more information about
UBOS, visit http://ubos.net/

This command may be invoked in the following ways:

END
        } else {
            print "Synopsis:\n";
        }
    }

    my $cmd = $0;
    $cmd =~ s!.*/!!;

    foreach my $command ( sort keys %$commands ) {
        if( !$helpFor || $command eq $helpFor ) {
            my $package      = $commands->{$command};
            my $synopsisHelp = UBOS::Utils::invokeMethod( $package . '::synopsisHelp' ) || '';

            if( $synopsisHelp ) { # skip commands that don't have this
                foreach my $synopsis ( sort keys %$synopsisHelp ) {
                    my $help = $synopsisHelp->{$synopsis};

                    $synopsis =~ s!^\s+!!;
                    $synopsis =~ s!\s+$!!;

                    print "    $cmd $command" . ( $synopsis ? " $synopsis" : '' ) . "\n";
                    if( $long || $helpFor ) {
                        $help =~ s!^\s+!!gm;
                        $help =~ s!\s+$!!gm;
                        $help =~ s!^!        !gm;

                        print "$help\n\n";
                    }
                }
            }
        }
    }

    unless( $helpFor ) {
        print "    $cmd --help\n";
        if( $long ) {
            print <<END;
        Display help text.

END
        }
        print "    $cmd <command> [<args>...] --help\n";
        if( $long ) {
            print <<END;
        Display help text for this command.

END
        }
    }

    exit $exit;
}

1;

# mandatory line, flocking depends on DATA file handle
__DATA__
