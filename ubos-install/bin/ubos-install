#!/usr/bin/perl
#
# Install UBOS on one or more currently unmounted devices or disk images.
#
# Examples:
#     ubos-install /dev/sda
#             Install on a hard drive
#     ubos-install --hostname myserver /dev/sda /dev/sdb
#             Install on two hard drives in raid mode. Use provided hostname
#     ubos-install /some/file
#             Install on an image file. File must exist.

#     ubos-install --deviceclass rpi /dev/sdb
#     ubos-install --deviceclass pc --bootloader-device /dev/sda --varpartition /dev/sda2 /dev/sda1
# 
# This file is part of ubos-install.
# (C) 2012-2015 Indie Computing Corp.
#
# ubos-install is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# ubos-install is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with ubos-install.  If not, see <http://www.gnu.org/licenses/>.
#

use strict;
use warnings;

use Getopt::Long qw( :config pass_through );

use UBOS::Logging;
use UBOS::Utils;

if ( $< != 0 ) {
    fatal( "This command must be run as root" ); 
}

my $verbose          = 0;
my $logConfigFile    = undef;
my $ret              = 0;
my $channel          = undef;
my $hostname         = undef;
my $deviceclassname  = undef;
my $target           = undef;
my $repo             = undef;
my $help             = 0;

my $parseOk = GetOptions(
        'verbose+'      => \$verbose,
        'logConfig=s'   => \$logConfigFile,
        'channel=s'     => \$channel,
        'hostname=s'    => \$hostname,
        'deviceclass=s' => \$deviceclassname,
        'target=s'      => \$target,
        'repository=s'  => \$repo,
        'h|help'        => \$help );

UBOS::Logging::initialize( 'ubos-install', undef, $verbose, $logConfigFile );

if( $help ) {
    synopsisHelpQuit( 1 );
}

if( !$parseOk ) {
    synopsisHelpQuit( 0 );
}
if( $target && ! -d $target ) {
    fatal( 'Target is not a directory:', $target );
}
unless( $deviceclassname ) {
    # Use current device class
    my $out;
    UBOS::Utils::myexec( 'uname -a', undef, \$out, undef );
    if( $out =~ m!(alarmpi|raspberry).*armv6l! ) {
        $deviceclassname = 'rpi';
    } elsif( $out =~ m!x86_64! ) {
        $deviceclassname = 'pc';
    } else {
        fatal( 'Cannot automatically determine --deviceclass. Need to specify as argument.' );
    }
}

my $installer = findInstaller( $deviceclassname );
unless( $installer ) {
    fatal( 'Cannot find installer for device class', $deviceclassname );
}

if( $target ) {
    $installer->setTarget( $target );
} else {
    $installer->useTempTarget();
}
if( $hostname ) {
    $installer->setHostname( $hostname );
}
if( !$channel && -r '/etc/ubos/channel' ) {
    $channel = UBOS::Utils::slurpFile( '/etc/ubos/channel' );
    $channel =~ s!^\s+!!;
    $channel =~ s!\s+$!!;
}
if( $channel ) {
    $installer->setChannel( $channel );
}
if( $repo ) {
    $installer->setRepo( $repo );
}

debug( 'Using installer', $installer );

my $diskLayout = $installer->createDiskLayout( \@ARGV );
unless( $diskLayout ) {
    synopsisHelpQuit( 0 );
}
$installer->install( $diskLayout );

exit( $ret );


##
# Find the right installer for this device class
sub findInstaller {
    my $className = shift;

    my $installers = UBOS::Utils::findPerlShortModuleNamesInPackage( 'UBOS::Install::Installers' );
    my $installer  = $installers->{$className};

    unless( $installer ) {
        return undef;
    }

    my $ret = UBOS::Utils::invokeMethod( $installer . '->new' );
    return $ret;
}

#####
# Print synopsis or help
# $long: if true, print long help
# $exit: exit code
sub synopsisHelpQuit {
    my $long = shift;
    my $exit = shift || 0;

    if( $long ) {
        print <<END;
Install UBOS.
END
    } else {
        print "Synopsis:\n";
    }
    print "    $0 <device> ...\n";
    if( $long ) {
        print <<END;
        Install UBOS on <device>. <device> must be a disk device, or a pre-allocated disk image.
        If more than one <device> is given, mirror across at least two disks (RAID1).
        WARNING: THIS WILL FORMAT <device>. ALL YOUR DATA ON IT WILL BE LOST.
        
        Optional arguments:
            --verbose:
                  Increase amount of status output.
            --logConfFile <log4perlconf>:
                  Alternate logging configuration file (not common).
            --channel <channel>:
                  The UBOS release channel; defaults to green.
            --hostname <hostname>:
                  The hostname to set; defaults to a deviceclass-specific name.
            --repository <path>:
                  Use this local UBOS repository instead of http://depot.ubos.net/
            --target <path>:
                  The directory to which the new system will be mounted temporarily during assembly.
                  Defaults to a temp directoy in the current working directory. Make sure there
                  is enough disk space for the entire system
            --deviceclass <class>:
                  The device class, e.g. rpi (Raspberry Pi), pc (x86_64). The host on which $0
                  is run, and deviceclass must be compatible (e.g. don't specify rpi on a PC).
END
    }
        
    print "    $0 [ --bootpartition <part> ][ --varpartition <part> ][ --bootloaderdevice <dev>] --rootpartition <part>\n";
    if( $long ) {
        print <<END;
        Install UBOS on root partition <part>. <part> must be a partition such as /dev/sda3.
        If more than one root partition is given, mirror across at least two partitions (RAID1).
        WARNING: THIS WILL OVERWRITE all partitions you specify. ALL YOUR DATA ON THEM WILL BE LOST.
        However, it will not change the partition table, nor will it touch other partitions.

        Optional arguments:
            --verbose:
                  Increase amount of status output.
            --logConfFile <log4perlconf>:
                  Alternate logging configuration file (not common).
            --channel <channel>:
                  The UBOS release channel; defaults to green.
            --hostname <hostname>:
                  The hostname to set; defaults to a deviceclass-specific name.
            --repository <path>:
                  Use this local UBOS repository instead of http://depot.ubos.net/
            --target <path>:
                  The directory to which the new system will be mounted temporarily during assembly.
                  Defaults to a temp directoy in the current working directory. Make sure there
                  is enough disk space for the entire system
            --deviceclass <class>:
                  The device class, e.g. rpi (Raspberry Pi), pc (x86_64). The host on which $0
                  is run, and deviceclass must be compatible (e.g. don't specify rpi on a PC).
            --bootpartition <part>:
                  Use this block device as boot partition. If not provided, there will be no
                  separate boot partition. Note that some systems (e.g. Raspberry Pi) cannot
                  boot from a btrfs filesystem, and thus require that you specify a separate
                  boot partition that can be formatted as vfat.
            --bootloaderdevice <dev>:
                  Install the boot loader on this block device. This is only required for
                  some systems (e.g. x86_64) where boot loaders are written to a special place
                  on the hard disk.
            --varpartition <part>:
                  Use a separate /var partition. If more than one var partition is given, mirror
                  across at least two partitions (RAID1).
END
    }
    print "    $0 --help\n";
    if( $long ) {
        print <<END;
        Display help text.

END
    }

    exit 0;
}

1;
